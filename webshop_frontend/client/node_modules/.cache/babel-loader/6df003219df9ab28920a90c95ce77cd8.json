{"ast":null,"code":"const queryString = require('query-string');\n\nexport const handleQueryParams = (query, newQuery) => {\n  var parsed = queryString.parse(query);\n  let queryKeys = Object.keys(parsed);\n  let queryValues = Object.values(parsed);\n  newQuery = newQuery.split('=');\n  let key = newQuery[0];\n  let value = newQuery[1];\n  let txt = '';\n  let startOfQuery = '?';\n\n  if (parsed[key]) {\n    for (let i = 0; i < queryKeys.length; i++) {\n      if (i > 0) {\n        startOfQuery = '&';\n      }\n\n      key === queryKeys[i] ? txt += `${startOfQuery}${key}=${value}` : txt += `${startOfQuery}${queryKeys[i]}=${queryValues[i]}`;\n    }\n  } else {\n    for (let i = 0; i < queryKeys.length + 1; i++) {\n      if (i > 0) {\n        startOfQuery = '&';\n      }\n\n      i === queryKeys.length ? txt += `${startOfQuery}${key}=${value}` : txt += `${startOfQuery}${queryKeys[i]}=${queryValues[i]}`;\n    }\n  }\n\n  return txt;\n};\nexport const removeQueryParam = (query, key) => {\n  console.log(query);\n};","map":{"version":3,"sources":["A:/Repositories/webshop_react/webshop_frontend/client/src/App/js/functions.js"],"names":["queryString","require","handleQueryParams","query","newQuery","parsed","parse","queryKeys","Object","keys","queryValues","values","split","key","value","txt","startOfQuery","i","length","removeQueryParam","console","log"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAClD,MAAIC,MAAM,GAAGL,WAAW,CAACM,KAAZ,CAAkBH,KAAlB,CAAb;AACA,MAAII,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB;AACA,MAAIK,WAAW,GAAGF,MAAM,CAACG,MAAP,CAAcN,MAAd,CAAlB;AACAD,EAAAA,QAAQ,GAAGA,QAAQ,CAACQ,KAAT,CAAe,GAAf,CAAX;AACA,MAAIC,GAAG,GAAGT,QAAQ,CAAC,CAAD,CAAlB;AACA,MAAIU,KAAK,GAAGV,QAAQ,CAAC,CAAD,CAApB;AACA,MAAIW,GAAG,GAAG,EAAV;AACA,MAAIC,YAAY,GAAG,GAAnB;;AACA,MAAIX,MAAM,CAACQ,GAAD,CAAV,EAAiB;AACb,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACW,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIA,CAAC,GAAG,CAAR,EAAW;AACPD,QAAAA,YAAY,GAAG,GAAf;AACH;;AACDH,MAAAA,GAAG,KAAKN,SAAS,CAACU,CAAD,CAAjB,GAAuBF,GAAG,IAAK,GAAEC,YAAa,GAAEH,GAAI,IAAGC,KAAM,EAA7D,GAAiEC,GAAG,IAAK,GAAEC,YAAa,GAAET,SAAS,CAACU,CAAD,CAAI,IAAGP,WAAW,CAACO,CAAD,CAAI,EAAzH;AACH;AACJ,GAPD,MAOO;AACH,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACW,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,UAAIA,CAAC,GAAG,CAAR,EAAW;AACPD,QAAAA,YAAY,GAAG,GAAf;AACH;;AACDC,MAAAA,CAAC,KAAKV,SAAS,CAACW,MAAhB,GAAyBH,GAAG,IAAK,GAAEC,YAAa,GAAEH,GAAI,IAAGC,KAAM,EAA/D,GAAmEC,GAAG,IAAK,GAAEC,YAAa,GAAET,SAAS,CAACU,CAAD,CAAI,IAAGP,WAAW,CAACO,CAAD,CAAI,EAA3H;AACH;AACJ;;AACD,SAAOF,GAAP;AACH,CAzBM;AA2BP,OAAO,MAAMI,gBAAgB,GAAG,CAAChB,KAAD,EAAQU,GAAR,KAAgB;AAC5CO,EAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACH,CAFM","sourcesContent":["const queryString = require('query-string');\r\n\r\nexport const handleQueryParams = (query, newQuery) => {\r\n    var parsed = queryString.parse(query);\r\n    let queryKeys = Object.keys(parsed)\r\n    let queryValues = Object.values(parsed)\r\n    newQuery = newQuery.split('=');\r\n    let key = newQuery[0];\r\n    let value = newQuery[1];\r\n    let txt = ''\r\n    let startOfQuery = '?';\r\n    if (parsed[key]) {\r\n        for (let i = 0; i < queryKeys.length; i++) {\r\n            if (i > 0) {\r\n                startOfQuery = '&';\r\n            }\r\n            key === queryKeys[i] ? txt += `${startOfQuery}${key}=${value}` : txt += `${startOfQuery}${queryKeys[i]}=${queryValues[i]}`\r\n        }\r\n    } else {\r\n        for (let i = 0; i < queryKeys.length + 1; i++) {\r\n            if (i > 0) {\r\n                startOfQuery = '&';\r\n            }\r\n            i === queryKeys.length ? txt += `${startOfQuery}${key}=${value}` : txt += `${startOfQuery}${queryKeys[i]}=${queryValues[i]}`\r\n        }\r\n    }\r\n    return txt\r\n}\r\n\r\nexport const removeQueryParam = (query, key) => {\r\n    console.log(query)\r\n}"]},"metadata":{},"sourceType":"module"}